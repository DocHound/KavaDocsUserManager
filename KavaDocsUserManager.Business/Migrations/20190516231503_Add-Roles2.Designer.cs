// <auto-generated />
using System;
using KavaDocsUserManager.Business.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KavaDocsUserManager.Business.Migrations
{
    [DbContext(typeof(KavaDocsContext))]
    [Migration("20190516231503_Add-Roles2")]
    partial class AddRoles2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KavaDocsUserManager.Business.Models.AuthToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Entered");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("AuthTokens");
                });

            modelBuilder.Entity("KavaDocsUserManager.Business.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("KavaDocsUserManager.Business.Models.OrganizationRepository", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("OrganizationId");

                    b.Property<Guid>("RepositoryId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RepositoryId")
                        .IsUnique();

                    b.ToTable("OrganizationRepositories");
                });

            modelBuilder.Entity("KavaDocsUserManager.Business.Models.Repository", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CssOverrides");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Domain")
                        .HasMaxLength(100);

                    b.Property<bool>("IncludeInSearchResults");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("RequiresAuth");

                    b.Property<string>("Settings");

                    b.Property<string>("TableOfContents");

                    b.Property<string>("Tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("KavaDocsUserManager.Business.Models.RepositoryUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RepositoryId");

                    b.Property<Guid>("UserId");

                    b.Property<int>("UserType");

                    b.HasKey("Id");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRepositories");
                });

            modelBuilder.Entity("KavaDocsUserManager.Business.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsGlobalAdmin");

                    b.Property<bool>("IsRepoAdmin");

                    b.Property<int>("Level");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("KavaDocsUserManager.Business.Models.RoleUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("KavaDocsUserManager.Business.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Company")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("FirstName")
                        .HasMaxLength(80);

                    b.Property<string>("Initials")
                        .HasMaxLength(5);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("UserDisplayName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ValidationKey")
                        .HasMaxLength(35);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KavaDocsUserManager.Business.Models.OrganizationRepository", b =>
                {
                    b.HasOne("KavaDocsUserManager.Business.Models.Organization", "Organization")
                        .WithMany("Repositories")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KavaDocsUserManager.Business.Models.Repository", "Respository")
                        .WithOne("Organization")
                        .HasForeignKey("KavaDocsUserManager.Business.Models.OrganizationRepository", "RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KavaDocsUserManager.Business.Models.RepositoryUser", b =>
                {
                    b.HasOne("KavaDocsUserManager.Business.Models.Repository", "Repository")
                        .WithMany("Users")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KavaDocsUserManager.Business.Models.User", "User")
                        .WithMany("Repositories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KavaDocsUserManager.Business.Models.RoleUser", b =>
                {
                    b.HasOne("KavaDocsUserManager.Business.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KavaDocsUserManager.Business.Models.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
